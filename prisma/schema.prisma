// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Usuario {
  id         Int                @id @default(autoincrement())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  name       String?
  lastName   String?
  usuario    String             @unique
  email      String             @unique
  password   String
  rol        UsuarioRole
  active     Boolean

  direcciones UsuariosDireccion[] // ← Relación inversa

  @@map("usuarios")
}

enum UsuarioRole {
  ADMIN
  CLIENT
}

model Producto {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  name        String?
  precio      Float?
  descripcion String?
  imagen      String?

  categoriaId Int
  categoria   Categoria  @relation(fields: [categoriaId], references: [id])

  color       Int
  estado      Boolean
  active     Boolean

  @@map("categoriasproductos")
}

model Type {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  name        String?

  categorias  Categoria[] // ← Relación inversa

  @@map("type")
}

model Categoria {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  name        String?

  typeId      Int
  type        Type        @relation(fields: [typeId], references: [id])

  productos   Producto[]  // ← Relación inversa

  @@map("categoria")
}

model Direccion {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  calle       String?
  ciudad      String?
  provincia   String?
  cpa         String?
  pais        String?

  usuarios    UsuariosDireccion[] // ← Relación inversa

  @@map("direcciones")
}

model UsuariosDireccion {
  usuarioId   Int
  direccionId Int

  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  direccion   Direccion @relation(fields: [direccionId], references: [id])

  @@id([usuarioId, direccionId])
  @@map("usuario_direcciones")
}